using System;
using System.IO;
using System.Linq;
using System.Text;
using System.Globalization;
using System.Security.Claims;
using System.Threading.Tasks;
using System.Collections.Generic;
using System.IdentityModel.Tokens.Jwt;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Hosting.Server;
using Microsoft.AspNetCore.Authentication;
using Microsoft.Extensions.Configuration;
using Microsoft.IdentityModel.Tokens;
using SendGrid;
using SendGrid.Helpers.Mail;
using MongoDB.Bson;
using Metis.API.Models;
using Metis.API.Models.Store;
using Metis.API.Models.Requests;
using Metis.API.Models.Managers;

namespace Metis.API.Controllers
{
    [Authorize(AuthenticationSchemes = Microsoft.AspNetCore.Authentication.JwtBearer.JwtBearerDefaults.AuthenticationScheme)]
    [ApiController]
    [Route("[controller]")]
    public class UserController : BaseController
    {
        private readonly IConfiguration _configuration;
        private readonly UserManager _userManager;
        private readonly AuthenticationManager _authenticationManager;

        public UserController(ApplicationDbContext dataContext, IConfiguration configuration)
            : base(dataContext)
        {
            _configuration = configuration;
            _userManager = new UserManager(dataContext);

            var jwtOptions = new JwtOptions();
            _configuration.GetSection(nameof(JwtOptions)).Bind(jwtOptions); 
            _authenticationManager = new AuthenticationManager(jwtOptions, dataContext);
        }

        [HttpPost]
        [AllowAnonymous]
        [Route("LoginUser")]
        public async Task<IActionResult> Login(LoginRequest model)
        {
            var user = await _userManager.GetUserByEmailAsync(model.Email);
            if (user == null)
            {
                return BadRequest("User not found");
            }
            if (user.Enabled == false)
            {
                return BadRequest("User is disabled");
            }
            await _userManager.PasswordSignInAsync(user.Email, model.Password);
            var jwtOptions = new JwtOptions();
            _configuration.GetSection(nameof(JwtOptions)).Bind(jwtOptions);
            var token = await _authenticationManager.GenerateToken(user);
            return Ok(token);
        }

        [HttpPost]
        [Authorize(AuthenticationSchemes = Microsoft.AspNetCore.Authentication.JwtBearer.JwtBearerDefaults.AuthenticationScheme, Roles = "Administrator")]
        [Route("AddUser")]
        public async Task<IActionResult> AddUserAsync(AddUserRequest model)
        {
            int passwordlength = int.Parse(_configuration["Identity:AutoGeneratedPasswordLength"]);
            int numberOfNonAlphanumericCharacters = new Random().Next(1, passwordlength - 1);
            string password = Password.Generate(passwordlength, numberOfNonAlphanumericCharacters);

            await _userManager.AddUserAsync(model.FirstName, model.LastName, model.Email, model.Enabled, model.RoleId, model.LanguageId, password);

            var apiKey = _configuration["SendGrid:Key"];
            var client = new SendGridClient(apiKey);
            var msg = new SendGridMessage();
            msg.SetFrom(new EmailAddress("ivan.porta.web@gmail.com", "Ivan Porta"));
            msg.AddTo(new EmailAddress(model.Email, $"{model.FirstName} {model.LastName}"));
            msg.SetTemplateId("d-91d610861edb4a2cb48075c7f9c2b9fd");
            var dynamicTemplateData = new
            {
                FirstName = model.FirstName,
                Password = password
            };
            msg.SetTemplateData(dynamicTemplateData);
            await client.SendEmailAsync(msg);

            return Ok();
        }

        [HttpPost]
        [Authorize(AuthenticationSchemes = Microsoft.AspNetCore.Authentication.JwtBearer.JwtBearerDefaults.AuthenticationScheme, Roles = "Administrator")]
        [Route("EditUser")]
        public async Task<IActionResult> EditUserAsync(EditUserRequest model)
        {
            await _userManager.EditUserAsync(model.Id, model.FirstName, model.LastName, model.Email, model.Enabled, model.RoleId, model.LanguageId);
            return Ok();
        }

        [HttpPost]
        [Authorize(AuthenticationSchemes = Microsoft.AspNetCore.Authentication.JwtBearer.JwtBearerDefaults.AuthenticationScheme)]
        [Route("EditCurrentUser")]
        public async Task<IActionResult> EditCurrentUserAsync(EditCurrentUserRequest model)
        {
            var user = await _userManager.GetUserByEmailAsync(User.Claims.FirstOrDefault(c => c.Type == "username").Value);
            await _userManager.EditUserAsync(user.Id, model.FirstName, model.LastName, model.Email, null, null, model.LanguageId);
            return Ok();
        }

        [HttpPost]
        [Authorize(AuthenticationSchemes = Microsoft.AspNetCore.Authentication.JwtBearer.JwtBearerDefaults.AuthenticationScheme)]
        [Route("EditCurrentUserPassword")]
        public async Task<IActionResult> EditCurrentUserPasswordAsync(EditCurrentUserPasswordRequest request)
        {
            var user = await _userManager.GetUserByEmailAsync(User.Claims.FirstOrDefault(c => c.Type == "username").Value);
            await _userManager.EditUserPasswordAsync(user.Id, request.Password, request.NewPassword, request.ConfirmNewPassword);
            return Ok();
        }

        [HttpGet]
        [Authorize(AuthenticationSchemes = Microsoft.AspNetCore.Authentication.JwtBearer.JwtBearerDefaults.AuthenticationScheme, Roles = "Administrator")]
        [Route("GetUsers")]
        public async Task<IActionResult> GetUsersAsync()
        {
            IEnumerable<User> users = await _userManager.GetUsersAsync();
            return Ok(users);
        }

        [HttpGet]
        [Authorize(AuthenticationSchemes = Microsoft.AspNetCore.Authentication.JwtBearer.JwtBearerDefaults.AuthenticationScheme)]
        [Route("GetCurrentUser")]
        public async Task<IActionResult> GetCurrentUserAsync()
        {
            var user = await _userManager.GetUserByEmailAsync(User.Claims.FirstOrDefault(c => c.Type == "username").Value);
            return Ok(user);
        }

        [HttpGet]
        [Authorize(AuthenticationSchemes = Microsoft.AspNetCore.Authentication.JwtBearer.JwtBearerDefaults.AuthenticationScheme)]
        [Route("GetUserById")]
        public async Task<IActionResult> GetUserByIdAsync(int id)
        {
            User user = await _userManager.GetUserByIdAsync(id);
            return Ok(user);
        }

        [HttpGet]
        [Authorize(AuthenticationSchemes = Microsoft.AspNetCore.Authentication.JwtBearer.JwtBearerDefaults.AuthenticationScheme, Roles = "Administrator")]
        [Route("GetUsersByPage")]
        public async Task<IActionResult> GetUsersByPageAsync(int page, int itemsPerPage)
        {
            IEnumerable<User> users = await _userManager.GetUsersByPageAsync(page, itemsPerPage);
            return Ok(users);
        }

        [HttpGet]
        [Authorize(AuthenticationSchemes = Microsoft.AspNetCore.Authentication.JwtBearer.JwtBearerDefaults.AuthenticationScheme, Roles = "Administrator")]
        [Route("GetUsersByPageAndSearchQuery")]
        public async Task<IActionResult> GetUsersByPageAndSearchQueryAsync(int page, int itemsPerPage, string searchQuery)
        {
            IEnumerable<User> users = await _userManager.GetUsersByPageAsync(page, itemsPerPage, null, searchQuery);
            return Ok(users);
        }

        [HttpGet]
        [Authorize(AuthenticationSchemes = Microsoft.AspNetCore.Authentication.JwtBearer.JwtBearerDefaults.AuthenticationScheme, Roles = "Administrator")]
        [Route("GetUsersCount")]
        public async Task<IActionResult> GetUsersCountAsync()
        {
            int counter = await _userManager.GetUsersCountAsync();
            return Ok(counter);
        }

        [HttpGet]
        [Authorize(AuthenticationSchemes = Microsoft.AspNetCore.Authentication.JwtBearer.JwtBearerDefaults.AuthenticationScheme, Roles = "Administrator")]
        [Route("GetActiveUsersCount")]
        public async Task<IActionResult> GetActiveUsersCountAsync()
        {
            int counter = await _userManager.GetActiveUsersCountAsync();
            return Ok(counter);
        }

        [HttpGet]
        [Authorize(AuthenticationSchemes = Microsoft.AspNetCore.Authentication.JwtBearer.JwtBearerDefaults.AuthenticationScheme, Roles = "Administrator")]
        [Route("GetUsersBySearchQueryCount")]
        public async Task<IActionResult> GetUsersBySearchQueryCountAsync(string searchQuery)
        {
            int counter = await _userManager.GetUsersCountAsync(null, searchQuery);
            return Ok(counter);
        }

        [HttpDelete]
        [Route("DeleteCurrentUser")]
        [Authorize(AuthenticationSchemes = Microsoft.AspNetCore.Authentication.JwtBearer.JwtBearerDefaults.AuthenticationScheme)]
        public async Task<IActionResult> DeleteCurrentUserAsync()
        {
            var user = await _userManager.GetUserByEmailAsync(User.Claims.FirstOrDefault(c => c.Type == "username").Value);
            await _userManager.DeleteUserByIdAsync(user.Id);
            return Ok();
        }

        [HttpDelete]
        [Route("DeleteUserById")]
        [Authorize(AuthenticationSchemes = Microsoft.AspNetCore.Authentication.JwtBearer.JwtBearerDefaults.AuthenticationScheme, Roles = "Administrator")]
        public async Task<IActionResult> DeleteUserByIdAsync(int id)
        {
            await _userManager.DeleteUserByIdAsync(id);
            return Ok();
        }
    }
}