using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Authentication;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Hosting.Server;
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Configuration;
using System.IdentityModel.Tokens.Jwt;
using Metis.Models.Store;
using Metis.Models.Requests;
using Metis.Models.Managers;
using Metis.Models;
using Microsoft.IdentityModel.Tokens;
using System.Security.Claims;
using System.Globalization;
using System.Text;
using SendGrid;
using SendGrid.Helpers.Mail;

namespace Metis.API.Controllers
{
    [Authorize(AuthenticationSchemes = Microsoft.AspNetCore.Authentication.JwtBearer.JwtBearerDefaults.AuthenticationScheme)]
    [ApiController]
    [Route("[controller]")]
    public class UserController : BaseController
    {
        private readonly IConfiguration _configuration;
        public UserController(ApplicationDbContext dataContext, IConfiguration configuration)
            : base(dataContext)
        {
            _configuration = configuration;
        }

        [HttpPost]
        [AllowAnonymous]
        [Route("LoginUser")]
        public async Task<IActionResult> Login(LoginRequest model)
        {
            var user = await UserManager.GetUserByEmailAsync(_dataContext, model.Email);
            if(user == null)
            {
                return BadRequest("User not found");
            }
            if(user.Enabled == false)
            {
                return BadRequest("User is disabled");
            }
            await UserManager.PasswordSignInAsync(_dataContext, user.Email, model.Password);
            var jwtOptions = new JwtOptions();
            _configuration.GetSection(nameof(JwtOptions)).Bind(jwtOptions); 
            var authenticationManager = new AuthenticationManager(jwtOptions, _dataContext);
            var token = await authenticationManager.GenerateToken(user);
            return Ok(token);
        }

        [HttpPost]
        [Authorize(AuthenticationSchemes = Microsoft.AspNetCore.Authentication.JwtBearer.JwtBearerDefaults.AuthenticationScheme, Roles = "Administrator")]
        [Route("AddUser")]
        // [ValidateAntiForgeryToken]
        public async Task<IActionResult> AddUserAsync(AddUserRequest model)
        {
            int passwordlength = int.Parse(_configuration["Identity:AutoGeneratedPasswordLength"]);
            int numberOfNonAlphanumericCharacters = new Random().Next(1, passwordlength - 1);
            string password = Password.Generate(passwordlength, numberOfNonAlphanumericCharacters);

            await UserManager.AddUserAsync(_dataContext, model.FirstName, model.LastName, model.Email, model.Enabled, model.RoleId, model.LanguageId, password, model.Lessons.Select(d => d.Id));

            var apiKey = _configuration["SendGrid:Key"];
            var client = new SendGridClient(apiKey);
            var msg = new SendGridMessage();
            msg.SetFrom(new EmailAddress("ivan.porta.web@gmail.com", "Ivan Porta"));
            msg.AddTo(new EmailAddress(model.Email, $"{model.FirstName} {model.LastName}"));
            msg.SetTemplateId("d-91d610861edb4a2cb48075c7f9c2b9fd");
            var dynamicTemplateData = new 
            {
                FirstName = model.FirstName,
                Password = password
            };
            msg.SetTemplateData(dynamicTemplateData);
            await client.SendEmailAsync(msg);

            return Ok();
        }

        [HttpPost]
        [Authorize(AuthenticationSchemes = Microsoft.AspNetCore.Authentication.JwtBearer.JwtBearerDefaults.AuthenticationScheme, Roles = "Administrator")]
        [Route("EditUser")]
        public async Task<IActionResult> EditUserAsync(EditUserRequest model)
        {
            await UserManager.EditUserAsync(_dataContext, model.Id, model.FirstName, model.LastName, model.Email, model.Enabled, model.RoleId, model.LanguageId, model.Lessons.Select(d => d.Id));
            return Ok();
        }

        [HttpGet]
        [Authorize(AuthenticationSchemes = Microsoft.AspNetCore.Authentication.JwtBearer.JwtBearerDefaults.AuthenticationScheme, Roles = "Administrator")]
        [Route("GetUsers")]
        public async Task<IActionResult> GetUsersAsync()
        {
            IEnumerable<User> users = await UserManager.GetUsersAsync(_dataContext);
            return Ok(users);
        }
     
        [HttpGet]
        [Authorize(AuthenticationSchemes = Microsoft.AspNetCore.Authentication.JwtBearer.JwtBearerDefaults.AuthenticationScheme)]
        [Route("GetCurrentUser")]
        public async Task<IActionResult> GetCurrentUserAsync()
        {
            var user = await UserManager.GetUserByEmailAsync(_dataContext, User.Claims.FirstOrDefault(c => c.Type == "username").Value);
            return Ok(user);
        }

        [HttpGet]
        [Authorize(AuthenticationSchemes = Microsoft.AspNetCore.Authentication.JwtBearer.JwtBearerDefaults.AuthenticationScheme)]
        [Route("GetUserById")]
        public async Task<IActionResult> GetUserByIdAsync(int id)
        {
            User user = await UserManager.GetUserByIdAsync(_dataContext, id);
            return Ok(user);
        }

        [HttpGet]
        [Authorize(AuthenticationSchemes = Microsoft.AspNetCore.Authentication.JwtBearer.JwtBearerDefaults.AuthenticationScheme, Roles = "Administrator")]
        [Route("GetUsersByPage")]
        public async Task<IActionResult> GetUsersByPageAsync(int page, int itemsPerPage)
        {
            IEnumerable<User> users = await UserManager.GetUsersByPageAsync(_dataContext, page, itemsPerPage);
            return Ok(users);
        }

        [HttpGet]
        [Authorize(AuthenticationSchemes = Microsoft.AspNetCore.Authentication.JwtBearer.JwtBearerDefaults.AuthenticationScheme, Roles = "Administrator")]
        [Route("GetUsersByPageAndSearchQuery")]
        public async Task<IActionResult> GetUsersByPageAndSearchQueryAsync(int page, int itemsPerPage, string searchQuery)
        {
            IEnumerable<User> users = await UserManager.GetUsersByPageAsync(_dataContext, page, itemsPerPage, searchQuery);
            return Ok(users);
        }

        [HttpGet]
        [Authorize(AuthenticationSchemes = Microsoft.AspNetCore.Authentication.JwtBearer.JwtBearerDefaults.AuthenticationScheme, Roles = "Administrator")]
        [Route("GetUsersCount")]
        public async Task<IActionResult> GetUsersCountAsync()
        {
            int counter = await UserManager.GetUsersCountAsync(_dataContext);
            return Ok(counter);
        }

        [HttpGet]
        [Authorize(AuthenticationSchemes = Microsoft.AspNetCore.Authentication.JwtBearer.JwtBearerDefaults.AuthenticationScheme, Roles = "Administrator")]
        [Route("GetActiveUsersCount")]
        public async Task<IActionResult> GetActiveUsersCountAsync()
        {
            int counter = await UserManager.GetActiveUsersCountAsync(_dataContext);
            return Ok(counter);
        }

        [HttpGet]
        [Authorize(AuthenticationSchemes = Microsoft.AspNetCore.Authentication.JwtBearer.JwtBearerDefaults.AuthenticationScheme, Roles = "Administrator")]
        [Route("GetUsersBySearchQueryCount")]
        public async Task<IActionResult> GetUsersBySearchQueryCountAsync(string searchQuery)
        {
            int counter = await UserManager.GetUsersCountAsync(_dataContext, searchQuery);
            return Ok(counter);
        }

        [HttpDelete]
        [Route("DeleteUserById")]
        [Authorize(AuthenticationSchemes = Microsoft.AspNetCore.Authentication.JwtBearer.JwtBearerDefaults.AuthenticationScheme, Roles = "Administrator")]
        public async Task<IActionResult> DeleteUserByIdAsync(int id)
        {
            await UserManager.DeleteUserByIdAsync(_dataContext, id);
            return Ok();
        }
    }
}